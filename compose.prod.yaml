# Utilisation des champs d'extension (x-*) pour une meilleure organisation
x-traefik-host-rule: &traefik-host-rule "Host(`${FRONTEND_DOMAIN}`) || Host(`${WWW_FRONTEND_DOMAIN}`)"

# Labels Traefik spécifiques pour le service frontend
x-traefik-frontend-labels: &traefik-frontend-labels
  traefik.enable: "true"
  traefik.docker.network: "webproxy"
  # --- Routeur HTTPS pour le frontend ---
  "traefik.http.routers.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}-secure.rule": *traefik-host-rule
  "traefik.http.routers.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}-secure.entrypoints": "websecure"
  "traefik.http.routers.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}-secure.tls.certresolver": "le"
  # --- Routeur HTTP pour la redirection vers HTTPS ---
  "traefik.http.routers.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}-http.rule": *traefik-host-rule
  "traefik.http.routers.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}-http.entrypoints": "web"
  "traefik.http.routers.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}-http.middlewares": "https-redirect@docker"
  # --- Service pointant vers le conteneur frontend ---
  "traefik.http.services.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}.loadbalancer.server.port": "${FRONTEND_INTERNAL_PORT:-80}"

########### BACKEND #############

# Labels Traefik spécifiques pour le service backend (exposé sur /api)
x-traefik-backend-labels: &traefik-backend-labels
  traefik.enable: "true"
  traefik.docker.network: "webproxy"
  # --- Middleware pour supprimer le préfixe /api ---
  "traefik.http.middlewares.${PROJECT_NAME}-api-stripprefix.stripprefix.prefixes": "/api"
  # --- Routeur HTTPS pour le backend ---
  "traefik.http.routers.${PROJECT_NAME}-${BACKEND_SERVICE_NAME}-secure.rule": "(Host(`${FRONTEND_DOMAIN}`) || Host(`${WWW_FRONTEND_DOMAIN}`)) && PathPrefix(`/api`)"
  "traefik.http.routers.${PROJECT_NAME}-${BACKEND_SERVICE_NAME}-secure.entrypoints": "websecure"
  "traefik.http.routers.${PROJECT_NAME}-${BACKEND_SERVICE_NAME}-secure.tls.certresolver": "le"
  "traefik.http.routers.${PROJECT_NAME}-${BACKEND_SERVICE_NAME}-secure.middlewares": "api-stripprefix"
  # --- Routeur HTTP pour la redirection vers HTTPS ---
  "traefik.http.routers.${PROJECT_NAME}-${BACKEND_SERVICE_NAME}-http.rule": "(Host(`${FRONTEND_DOMAIN}`) || Host(`${WWW_FRONTEND_DOMAIN}`)) && PathPrefix(`/api`)"
  "traefik.http.routers.${PROJECT_NAME}-${BACKEND_SERVICE_NAME}-http.entrypoints": "web"
  "traefik.http.routers.${PROJECT_NAME}-${BACKEND_SERVICE_NAME}-http.middlewares": "https-redirect@docker"
  # --- Service pointant vers le conteneur backend ---
  "traefik.http.services.${PROJECT_NAME}-${BACKEND_SERVICE_NAME}.loadbalancer.server.port": "${BACKEND_INTERNAL_PORT:-8080}"

services:
  # --- SERVICE BASE DE DONNÉES ---
  db:
    image: postgres:16-alpine
    container_name: ${PROJECT_NAME}-${DB_SERVICE_NAME}
    restart: unless-stopped
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "pg_isready", "-h", "localhost", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - database_data:/var/lib/postgresql/data
      - ./sql/sql:/docker-entrypoint-initdb.d
    networks:
      - default

  # --- SERVICE BACKEND ---
  backend:
    build:
      context: ./backend
    container_name: ${PROJECT_NAME}-${BACKEND_SERVICE_NAME} # à enlever (?!)
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}"
    depends_on:
      db: # Remplacez la simple liste par cet objet
        condition: service_healthy
    networks:
      - default
      - webproxy
    labels:
      <<: *traefik-backend-labels

  # --- SERVICE FRONTEND ---
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod # On utilise le Dockerfile de production
    container_name: ${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - default
      - webproxy
    labels:
      <<: *traefik-frontend-labels

networks:
  webproxy:
    external: true
  default:

volumes:
  database_data:
    # Le nom réel du volume Docker peut être défini par une variable
    name: ${DB_VOLUME_NAME}